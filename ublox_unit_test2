import pandas as pd
import matplotlib.pyplot as plt
import gmplot as gmp
import numpy as np
import pymap3d as pm

# initialize the stuffffff
dataFile = '' 
latCol = 'latitude(degrees)'
lonCol = 'longitude(degrees)'
altCol = 'altitude(meters)'
APIKey = '' # You need to generate an API key to do the map overlay

df = pd.read_csv(dataFile) 

# 1. get ENU [east north up] coordinates and plot each vs time

# set origin [default: use starting coordinates]
lat0 = df[latCol][0]
lon0 = df[lonCol][0]
alt0 = df[altCol][0]

# convert lat/lon data to ENU
enu = []

for i in range(len(df.index)):
    lat = df[latCol][i]
    lon = df[lonCol][i]
    alt = df[altCol][i]
    enu.append({'enu': str(pm.geodetic2enu(lat, lon, alt, lat0, lon0, alt0))})

# make a new dataframe w/ ENU coordinates
enuDf = pd.DataFrame(enu)

# split ENU coordinates from one column into three separate columns
enuDf = enuDf['enu'].str.strip('()')\
            .str.split(', ', expand=True)\
            .rename(columns={0:'east', 1:'north', 2:'up'})

# insert time col, fix time to start at 0 w/ +0.05s increments
#enuDf.insert(0, "time", df['time'], True)
enuDf.insert(0, 'time', True)
enuDf['time'] = df.index * 0.05

# fix ENU pts so they're floats, not strings [else y-axis will be unordered]
enuDf["east"] = pd.to_numeric(enuDf["east"], downcast="float", errors='coerce')
enuDf["north"] = pd.to_numeric(enuDf["north"], downcast="float", errors='coerce')
enuDf["up"] = pd.to_numeric(enuDf["up"], downcast="float", errors='coerce')

# plotting time vs east as array [could also do df]
enu = np.array(enuDf)
t = enu[:,0]
e = enu[:,1]
n = enu[:,2]
u = enu[:,3]

x = 500 # for simplicity, only every x-th pt is plotted; change as needed.
fig, (ax1, ax2, ax3) = plt.subplots(3)
ax1.plot(t[::x], e[::x], 'tab:red')
ax1.set(xlabel='time [s]', ylabel='east')
ax2.plot(t[::x], n[::x], 'tab:green')
ax2.set(xlabel='time [s]', ylabel='north')
ax3.plot(t[::x], u[::x], 'tab:blue')
ax3.set(xlabel='time [s]', ylabel='up')
fig.tight_layout() # fixes overlap b/t subplots

# 2. overlay lat/lon coordinates on Google Maps

mapLoc = ('/Users/amattinger/Desktop/gmap_data.html')

zoom = 17 # default zoom, change as desired 
gmap1 = gmp.GoogleMapPlotter(lat0, lon0, zoom) # create map at origin
  
# overlays coordinate points onto map
gmap1.scatter(df['latitude(degrees)'], df['longitude(degrees)'], size = 1, 
              linewidth = 1, marker = False) 

# draws a blue line b/t given coordinate points
gmap1.plot(df['latitude(degrees)'], df['longitude(degrees)'],
           color = 'cornflowerblue', edge_width = 2.5)

# Google requires making an API Key to use Maps as of June 2018
gmap1.apikey = APIKey
  
gmap1.draw(mapLoc)
