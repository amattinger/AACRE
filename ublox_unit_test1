# 0. preprocess data in case variable number of columns/missing column headers
# 1. plot number of satellites against time
# 2. code carrier relation: 
# 2a. count times per sat that code [pseudorange/prMes] - absval carrier [cpMes]*0.19m = 0
# 2b. check that prMeas is not a perfect multiple of 0.19*cpMeas 

import csv
import pandas as pd
import matplotlib.pyplot as plt

# 0. preprocess data in case variable number of columns/missing column headers

# input and defs
dataFile = "/Users/amattinger/Downloads/15-53-22_ublox_rxmraw.csv"
processedFile = "/Users/amattinger/Downloads/gps_data_processed.csv"
delimiter = ','
maxCols = 0

# loop through data lines
with open(dataFile, 'r') as temp:
    lines = temp.readlines()
    for l in lines:
        # count columns in current line
        colCount = len(l.split(delimiter)) + 1
        # Set the new most column count
        maxCols = colCount if maxCols < colCount else maxCols

# set column names
colNames = ['time', 'rcvTOW', 'week', 'numSV','reserved1']
# generate column names for each satellite 
i = 0
for col in range(5, maxCols - 1, 7):
    n = str(i)
    colNames.extend(['sv'+n+'.cpMes', 'sv'+n+'.prMes', 'sv'+n+'.doMes', 
            'sv'+n+'.sv', 'sv'+n+'.mesQI', 'sv'+n+'.cno', 'sv'+n+'.lli'])
    i += 1

# turn csv into a data file now that column names have been added
df = pd.read_csv(dataFile, header=None, delimiter=delimiter, names=colNames)
df.drop(index=df.index[0], axis=0, inplace=True)
# print(df)

# save as csv 
df.to_csv(processedFile, index=False)

# read new csv into a df, then perform unit tests

df = pd.read_csv(processedFile)

# 1. plot number of satellites against time, output mean

# subtract first time from all subsequent times [i.e., start at t=0]   
df['time'] = df['time'].subtract(df['time'][0])
# print(df)

plt.scatter(df['time'], df['numSV'], s=1)
plt.xlabel('time [s]')
plt.ylabel('no. SVs')

# average number of satellites
print("\nAverage number of satellites:", format(df['numSV'].mean(), '.2f'))

# 2. code carrier relation: 
# 2a. count times per sat that code [pseudorange/prMes] - absval carrier [cpMes]*0.19m = 0
correlations = 0
x = lambda a : 0.19*abs(a)
codes = [col for col in df.columns if 'prMes' in col]
carriers = [col for col in df.columns if 'cpMes' in col]

print("\nFirst test: difference equals zero")
for num in range(len(codes)):
    df['sv' + str(num) + '.zeroCorr'] = (df[codes[num]] - x(df[carriers[num]]) == 0)
    print(df['sv' + str(num) + '.zeroCorr'].value_counts())
    
# 2b. check that prMeas is not a perfect multiple of 0.19*cpMeas 
print("\nSecond test: perfect multiplier")
for num in range(len(codes)):
    df['sv' + str(num) + '.perfMult'] = (df[codes[num]] % x(df[carriers[num]]) == 0)
    print(df['sv' + str(num) + '.perfMult'].value_counts())
